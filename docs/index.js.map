{"mappings":"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","sources":["<anon>","src/index.ts","src/robot.ts","src/field.type.ts","src/utils.ts"],"sourcesContent":["(() => {\nconst $fe7cb297351b3dac$export$914aa6c2016e1c87 = -1;\nconst $fe7cb297351b3dac$export$bf8157097c96b73d = 0;\nconst $fe7cb297351b3dac$export$8d8bbcccef6455e9 = 1;\n\n\nclass $2259aecdb33154cd$export$20db0c138a037d2a {\n    constructor(field, xPosition, yPosition){\n        this.field = field;\n        this.xPosition = xPosition;\n        this.yPosition = yPosition;\n        this.isCrushed = false;\n        this.isFinished = false;\n        this.isForwardDirection = false;\n        this.isReachedBackwardBorder = false;\n        this.isReachedForwardBorder = false;\n        this.isSearchingWaySide = false;\n        this.node = document.createElement(\"div\");\n        this.node.classList.add(\"robot\");\n    }\n    determineMainDirection() {\n        if (!this.isTopCellFree) {\n            this.isReachedBackwardBorder = true;\n            this.isForwardDirection = true;\n        }\n        if (!this.isBottomCellFree) {\n            this.isReachedForwardBorder = true;\n            this.isForwardDirection = false;\n        }\n        if (this.isReachedBackwardBorder && this.isReachedForwardBorder) this.determineSidewayDirection();\n    }\n    determineSidewayDirection() {\n        if (!this.isSearchingWaySide) {\n            this.isReachedBackwardBorder = false;\n            this.isReachedForwardBorder = false;\n            this.isSearchingWaySide = true;\n            this.determineMainDirection();\n        }\n    }\n    resetDirection() {\n        this.isSearchingWaySide = false;\n        this.isForwardDirection = false;\n        this.isReachedBackwardBorder = false;\n        this.isReachedForwardBorder = false;\n    }\n    move() {\n        if (this.isSearchingWaySide && this.isReachedForwardBorder && this.isReachedBackwardBorder && !this.isRightCellFree) {\n            console.log(\"Stuck or finished\");\n            this.isFinished = true;\n            return;\n        }\n        if (this.isSearchingWaySide && this.isRightCellFree) this.moveRight();\n        else {\n            if (this.isBottomCellFree && this.isForwardDirection) this.moveBottom();\n            else if (this.isTopCellFree && !this.isForwardDirection) this.moveTop();\n        }\n    }\n    next() {\n        if (!this.isFinished) {\n            if (!this.isSearchingWaySide) this.paintCell();\n            this.determineMainDirection();\n            this.move();\n        }\n    }\n    paintCell() {\n        this.field[this.yPosition][this.xPosition] = (0, $fe7cb297351b3dac$export$8d8bbcccef6455e9);\n    }\n    moveLeft() {\n        this.xPosition--;\n        this.resetDirection();\n    }\n    moveRight() {\n        this.xPosition++;\n        this.resetDirection();\n    }\n    moveTop() {\n        this.yPosition--;\n    }\n    moveBottom() {\n        this.yPosition++;\n    }\n    get leftCell() {\n        return this.field[this.yPosition][this.xPosition - 1];\n    }\n    get rightCell() {\n        return this.field[this.yPosition][this.xPosition + 1];\n    }\n    get topCell() {\n        return this.field[this.yPosition - 1][this.xPosition];\n    }\n    get bottomCell() {\n        return this.field[this.yPosition + 1][this.xPosition];\n    }\n    get isLeftCellFree() {\n        return this.leftCell !== (0, $fe7cb297351b3dac$export$914aa6c2016e1c87);\n    }\n    get isRightCellFree() {\n        return this.rightCell !== (0, $fe7cb297351b3dac$export$914aa6c2016e1c87);\n    }\n    get isTopCellFree() {\n        return this.topCell !== (0, $fe7cb297351b3dac$export$914aa6c2016e1c87);\n    }\n    get isBottomCellFree() {\n        return this.bottomCell !== (0, $fe7cb297351b3dac$export$914aa6c2016e1c87);\n    }\n    checkIfCrushed() {\n        if (this.field[this.yPosition][this.xPosition] === (0, $fe7cb297351b3dac$export$914aa6c2016e1c87)) this.isCrushed = true;\n    }\n}\n\n\n\nfunction $39fdfeaa18e9917f$export$17fc0a47da34544a(fieldWidth, fieldHeight, wallXPosition, gapYPosition) {\n    const field = [];\n    for(let y = 0; y < fieldHeight; y++){\n        field[y] = [];\n        for(let x = 0; x < fieldWidth; x++){\n            const isXBorder = x === 0 || x === fieldWidth - 1;\n            const isYBorder = y === 0 || y === fieldHeight - 1;\n            const isXWall = x === wallXPosition && y !== gapYPosition;\n            const isWall = isXBorder || isYBorder || isXWall;\n            field[y][x] = isWall ? (0, $fe7cb297351b3dac$export$914aa6c2016e1c87) : (0, $fe7cb297351b3dac$export$bf8157097c96b73d);\n        }\n    }\n    return field;\n}\nfunction $39fdfeaa18e9917f$export$5569dda46793dc89(field) {\n    const appNode = document.body.querySelector(\"#app\");\n    const fieldNode = document.createElement(\"div\");\n    fieldNode.classList.add(\"field\");\n    field.forEach((row)=>{\n        const rowNode = document.createElement(\"div\");\n        rowNode.classList.add(\"row\");\n        row.forEach((cell)=>{\n            const cellNode = document.createElement(\"div\");\n            cellNode.classList.add(\"cell\");\n            rowNode.appendChild(cellNode);\n        });\n        fieldNode.appendChild(rowNode);\n    });\n    if (appNode) {\n        appNode.innerHTML = \"\";\n        appNode.appendChild(fieldNode);\n    }\n}\nfunction $39fdfeaa18e9917f$export$65972ef3a64ea716(field, robot) {\n    const fieldNode = document.querySelector(\".field\");\n    const rowNodes = fieldNode.querySelectorAll(\".row\");\n    rowNodes.forEach((rowNode, y)=>{\n        const cellNodes = rowNode.querySelectorAll(\".cell\");\n        cellNodes.forEach((cellNode, x)=>{\n            const cell = field[y][x];\n            if (cell === (0, $fe7cb297351b3dac$export$914aa6c2016e1c87)) cellNode.classList.add(\"wall\");\n            else if (cell === (0, $fe7cb297351b3dac$export$8d8bbcccef6455e9)) cellNode.classList.add(\"filled\");\n            else cellNode.classList.remove(\"filled\");\n            if (robot) {\n                const isInThisCell = robot.xPosition === x && robot.yPosition === y;\n                if (isInThisCell) {\n                    cellNode.appendChild(robot.node);\n                    if (robot.isCrushed) robot.node.classList.add(\"crushed\");\n                }\n            }\n        });\n    });\n}\n\n\nconst $c2848ebcf924d7cd$var$field = (0, $39fdfeaa18e9917f$export$17fc0a47da34544a)(15, 10, 4, 7);\nconst $c2848ebcf924d7cd$var$robot = new (0, $2259aecdb33154cd$export$20db0c138a037d2a)($c2848ebcf924d7cd$var$field, 1, 1);\n(0, $39fdfeaa18e9917f$export$5569dda46793dc89)($c2848ebcf924d7cd$var$field);\n(0, $39fdfeaa18e9917f$export$65972ef3a64ea716)($c2848ebcf924d7cd$var$field, $c2848ebcf924d7cd$var$robot);\nfunction $c2848ebcf924d7cd$var$goNext() {\n    $c2848ebcf924d7cd$var$robot.next();\n    (0, $39fdfeaa18e9917f$export$65972ef3a64ea716)($c2848ebcf924d7cd$var$field, $c2848ebcf924d7cd$var$robot);\n    if (!$c2848ebcf924d7cd$var$robot.isFinished) setTimeout($c2848ebcf924d7cd$var$goNext, 100);\n}\n$c2848ebcf924d7cd$var$goNext();\n\n})();\n//# sourceMappingURL=index.js.map\n","import { Robot } from \"./robot\";\nimport { createField, createFieldNodes, renderField } from \"./utils\";\n\nconst field = createField(15, 10, 4, 7)\nconst robot = new Robot(field, 1, 1);\n\ncreateFieldNodes(field);\nrenderField(field, robot);\n\nfunction goNext() {\n  robot.next();\n  renderField(field, robot);\n\n  if (!robot.isFinished) {\n    setTimeout(goNext, 100);\n  }\n}\n\ngoNext()\n","import { Field, PaintedCell, WallCell } from \"./field.type\";\n\nexport class Robot {\n  public node: Element;\n  public isCrushed = false;\n  public isFinished = false;\n  public isForwardDirection = false;\n  public isReachedBackwardBorder = false;\n  public isReachedForwardBorder = false;\n  public isSearchingWaySide = false;\n\n  constructor(public field: Field, public xPosition: number, public yPosition: number) {\n    this.node = document.createElement('div');\n    this.node.classList.add('robot');\n  }\n\n  public determineMainDirection(): void {\n    if (!this.isTopCellFree) {\n      this.isReachedBackwardBorder = true;\n      this.isForwardDirection = true;\n    }\n    if (!this.isBottomCellFree) {\n      this.isReachedForwardBorder = true;\n      this.isForwardDirection = false;\n    }\n\n    if (this.isReachedBackwardBorder && this.isReachedForwardBorder) {\n      this.determineSidewayDirection();\n    }\n  }\n\n  public determineSidewayDirection(): void {\n    if (!this.isSearchingWaySide) {\n      this.isReachedBackwardBorder = false;\n      this.isReachedForwardBorder = false;\n      this.isSearchingWaySide = true;\n\n      this.determineMainDirection();\n    }\n  }\n\n  public resetDirection(): void {\n    this.isSearchingWaySide = false;\n    this.isForwardDirection = false;\n    this.isReachedBackwardBorder = false;\n    this.isReachedForwardBorder = false;\n  }\n\n  public move(): void {\n    if (this.isSearchingWaySide && this.isReachedForwardBorder && this.isReachedBackwardBorder && !this.isRightCellFree) {\n      console.log('Stuck or finished');\n      this.isFinished = true;\n      return;\n    }\n\n    if (this.isSearchingWaySide && this.isRightCellFree) {\n      this.moveRight();\n    } else {\n      if (this.isBottomCellFree && this.isForwardDirection) {\n        this.moveBottom();\n      } else if (this.isTopCellFree && !this.isForwardDirection) {\n        this.moveTop();\n      }\n    }\n  }\n\n  public next(): void {\n    if (!this.isFinished) {\n      if (!this.isSearchingWaySide) {\n        this.paintCell();\n      }\n      this.determineMainDirection();\n      this.move();\n    }\n  }\n\n  public paintCell(): void {\n    this.field[this.yPosition][this.xPosition] = PaintedCell;\n  }\n\n  public moveLeft() {\n    this.xPosition--;\n    this.resetDirection();\n  }\n\n  public moveRight() {\n    this.xPosition++;\n    this.resetDirection();\n  }\n\n  public moveTop() {\n    this.yPosition--;\n  }\n\n  public moveBottom() {\n    this.yPosition++;\n  }\n\n  public get leftCell() {\n    return this.field[this.yPosition][this.xPosition - 1];\n  }\n\n  public get rightCell() {\n    return this.field[this.yPosition][this.xPosition + 1];\n  }\n\n  public get topCell() {\n    return this.field[this.yPosition - 1][this.xPosition];\n  }\n\n  public get bottomCell() {\n    return this.field[this.yPosition + 1][this.xPosition];\n  }\n\n  public get isLeftCellFree() {\n    return this.leftCell !== WallCell;\n  }\n\n  public get isRightCellFree() {\n    return this.rightCell !== WallCell;\n  }\n\n  public get isTopCellFree() {\n    return this.topCell !== WallCell;\n  }\n\n  public get isBottomCellFree() {\n    return this.bottomCell !== WallCell;\n  }\n\n  public checkIfCrushed(): void {\n    if (this.field[this.yPosition][this.xPosition] === WallCell) {\n      this.isCrushed = true;\n    }\n  }\n}\n","export type Field = number[][];\n\nexport const WallCell = -1;\nexport const FreeCell = 0;\nexport const PaintedCell = 1;","import { Field, FreeCell, PaintedCell, WallCell } from \"./field.type\";\nimport { Robot } from \"./robot\";\n\nexport function createField(fieldWidth: number, fieldHeight: number, wallXPosition: number, gapYPosition: number): Field {\n  const field: Field = [];\n  for (let y = 0; y < fieldHeight; y++) {\n    field[y] = [];\n    for (let x = 0; x < fieldWidth; x++) {\n      const isXBorder = x === 0 || x === fieldWidth - 1;\n      const isYBorder = y === 0 || y === fieldHeight - 1;\n      const isXWall = x === wallXPosition && y !== gapYPosition;\n\n      const isWall = isXBorder || isYBorder || isXWall;\n      field[y][x] = isWall ? WallCell : FreeCell;\n    }\n  }\n  return field;\n}\n\nexport function createFieldNodes(field: Field): void {\n  const appNode = document.body.querySelector('#app');\n\n  const fieldNode = document.createElement('div');\n  fieldNode.classList.add('field');\n\n  field.forEach((row) => {\n    const rowNode = document.createElement('div');\n    rowNode.classList.add('row');\n    row.forEach((cell) => {\n      const cellNode = document.createElement('div');\n      cellNode.classList.add('cell');\n      rowNode.appendChild(cellNode);\n    });\n    fieldNode.appendChild(rowNode);\n  });\n\n  if (appNode) {\n    appNode.innerHTML = '';\n    appNode.appendChild(fieldNode);\n  }\n}\n\nexport function renderField(field: Field, robot?: Robot): void {\n  const fieldNode = document.querySelector('.field');\n  const rowNodes = fieldNode!.querySelectorAll('.row');\n\n  rowNodes.forEach((rowNode, y) => {\n    const cellNodes = rowNode!.querySelectorAll('.cell');\n    cellNodes.forEach((cellNode, x) => {\n      const cell = field[y][x];\n\n      if (cell === WallCell) {\n        cellNode.classList.add('wall');\n      } else if (cell === PaintedCell) {\n        cellNode.classList.add('filled');\n      } else {\n        cellNode.classList.remove('filled');\n      }\n\n      if (robot) {\n        const isInThisCell = robot.xPosition === x && robot.yPosition === y;\n        if (isInThisCell) {\n          cellNode.appendChild(robot.node);\n          if (robot.isCrushed) {\n            robot.node.classList.add('crushed');\n          }\n        }\n      }\n    });\n  });\n}\n"],"names":["$39fdfeaa18e9917f$export$65972ef3a64ea716","field","robot","rowNodes","fieldNode","document","querySelector","querySelectorAll","forEach","rowNode","y","cellNodes","cellNode","x","cell","classList","add","remove","xPosition","yPosition","appendChild","node","isCrushed","$c2848ebcf924d7cd$var$field","fieldWidth","fieldHeight","wallXPosition","gapYPosition","isXBorder","isYBorder","isXWall","isWall","$c2848ebcf924d7cd$var$robot","constructor","isFinished","isForwardDirection","isReachedBackwardBorder","isReachedForwardBorder","isSearchingWaySide","createElement","determineMainDirection","isTopCellFree","isBottomCellFree","determineSidewayDirection","resetDirection","move","isRightCellFree","console","log","moveRight","moveBottom","moveTop","next","paintCell","moveLeft","leftCell","rightCell","topCell","bottomCell","isLeftCellFree","checkIfCrushed","appNode","body","row","innerHTML","$c2848ebcf924d7cd$var$goNext","setTimeout"],"version":3,"file":"index.js.map"}